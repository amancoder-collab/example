name: CI/CD Pipeline (PM2 Zero Downtime Deployment)

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    concurrency:
      group: test-${{ github.ref }}
      cancel-in-progress: true

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # - name: Run linting and tests
      #   run: |
      #     npm run lint
      #     npm run test:e2e
      #   env:
      #     PORT: 8000
      #     ...

      - name: Build project with esbuild
        if: github.event_name == 'push'
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            npm run build:prod
          else
            npm run build
          fi

      - name: Upload build artifacts
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            prisma/
            package.json
            package-lock.json
            ecosystem.prod.config.js
            ecosystem.staging.config.js

  deploy:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    runs-on: ubuntu-latest

    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true

    env:
      DEPLOY_PATH: /home/logicrays/deployments
      APP_NAME: test
      CI_USER: logicrays
      ENV_PATH: /home/logicrays/environments
      SERVICE_NAME: backend
      SSH_CMD: ssh -i ~/.ssh/serveo_deploy_key -o IdentitiesOnly=yes -p 42041 logicrays@serveo.net

    steps:
      - name: Set deployment variables
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "PM2_CONFIG=ecosystem.prod.config.js" >> $GITHUB_ENV
            echo "APP_PORT=8000" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
            echo "PM2_CONFIG=ecosystem.staging.config.js" >> $GITHUB_ENV
            echo "APP_PORT=8001" >> $GITHUB_ENV
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build-artifacts

      - name: Add Serveo host to known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PROD_SSH_KEY }}" > ~/.ssh/serveo_deploy_key
          chmod 600 ~/.ssh/serveo_deploy_key
          ssh-keyscan -p 42041 -H serveo.net >> ~/.ssh/known_hosts

      - name: Create release directory on remote
        run: |
          ${{ env.SSH_CMD }} "
            mkdir -p ${{ env.DEPLOY_PATH }}/${{ env.APP_NAME }}-${{ env.ENVIRONMENT }}/releases/release_${{ github.sha }}_$(date +%Y%m%d%H%M%S)/logs
            chmod 755 ${{ env.DEPLOY_PATH }}/${{ env.APP_NAME }}-${{ env.ENVIRONMENT }}/releases/release_${{ github.sha }}_$(date +%Y%m%d%H%M%S)/logs
          "

      - name: Upload and extract build artifacts
        run: |
          cd build-artifacts
          tar -czf ../artifacts.tar.gz .
          cd ..
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          RELEASE_DIR="${{ env.DEPLOY_PATH }}/${{ env.APP_NAME }}-${{ env.ENVIRONMENT }}/releases/release_${{ github.sha }}_${TIMESTAMP}"
          scp -P 42041 -i ~/.ssh/serveo_deploy_key -o IdentitiesOnly=yes artifacts.tar.gz logicrays@serveo.net:${RELEASE_DIR}/
          ${{ env.SSH_CMD }} "
            cd ${RELEASE_DIR}
            tar -xzf artifacts.tar.gz && rm artifacts.tar.gz
            ln -sf ${{ env.ENV_PATH }}/${{ env.ENVIRONMENT }}/${{ env.SERVICE_NAME }}/.env .env
          "

      - name: Install dependencies and deploy with PM2
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          RELEASE_DIR="${{ env.DEPLOY_PATH }}/${{ env.APP_NAME }}-${{ env.ENVIRONMENT }}/releases/release_${{ github.sha }}_${TIMESTAMP}"
          CURRENT_LINK="${{ env.DEPLOY_PATH }}/${{ env.APP_NAME }}-${{ env.ENVIRONMENT }}/current"
          PREVIOUS_LINK="${{ env.DEPLOY_PATH }}/${{ env.APP_NAME }}-${{ env.ENVIRONMENT }}/previous"
          APP_NAME_LOCAL="${{ env.APP_NAME }}-${{ env.ENVIRONMENT }}"
          
          ${{ env.SSH_CMD }} "
            export NVM_DIR=\$HOME/.nvm
            [ -s \$NVM_DIR/nvm.sh ] && . \$NVM_DIR/nvm.sh
            nvm install 20 && nvm use 20 && nvm alias default 20

            NODE_BINARY=\$(which node)
            NPM_BINARY=\$(which npm)

            \$NPM_BINARY install -g pm2

            cd ${RELEASE_DIR}
            \$NPM_BINARY ci --production

            \$NODE_BINARY ./node_modules/.bin/prisma migrate deploy
            \$NODE_BINARY ./node_modules/.bin/prisma generate

            # Store the current as previous before updating
            if [ -L \"${CURRENT_LINK}\" ] && [ -d \"\$(readlink -f \"${CURRENT_LINK}\")\" ]; then
              ln -sfn \"\$(readlink -f \"${CURRENT_LINK}\")\" \"${PREVIOUS_LINK}\"
            fi

            # Point the current symlink to this release
            ln -sfn ${RELEASE_DIR} ${CURRENT_LINK}

            cd ${CURRENT_LINK}
            
            # Set the app name for PM2
            export PM2_APP_NAME=\"${APP_NAME_LOCAL}\"

            if \$NPM_BINARY run pm2 list | grep -q \"${APP_NAME_LOCAL}\"; then
              \$NPM_BINARY run pm2 reload ${APP_NAME_LOCAL} --update-env
            else
              \$NPM_BINARY run pm2 start ${{ env.PM2_CONFIG }} --update-env
            fi
            
            \$NPM_BINARY run pm2 save
            
            # Clean up old releases - keep only 5 most recent
            cd ${{ env.DEPLOY_PATH }}/${{ env.APP_NAME }}-${{ env.ENVIRONMENT }}/releases
            ls -1td release_* | tail -n +6 | xargs -r rm -rf
          "

      - name: Verify Deployment
        run: |
          sleep 10
          ${{ env.SSH_CMD }} "
            echo 'Testing health endpoint...'
            max_attempts=5
            attempt=1
            while [ \$attempt -le \$max_attempts ]; do
              response=\$(curl -s -w '%{http_code}' http://localhost:${{ env.APP_PORT }}/health -o /dev/null)
              if [ \$response -eq 200 ]; then
                echo '✅ Health check passed!'
                exit 0
              else
                echo \"Attempt \$attempt failed: HTTP \$response\"
                if [ \$attempt -eq \$max_attempts ]; then
                  echo '❌ Health check failed'
                  pm2 logs ${{ env.APP_NAME }}-${{ env.ENVIRONMENT }} --lines 50 --nostream
                  exit 1
                fi
                sleep 5
                attempt=\$((attempt + 1))
              fi
            done
          "

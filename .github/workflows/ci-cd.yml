name: Node.js CI/CD with Docker

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  DOCKER_IMAGE: aman4790/cicd-test
  NODE_VERSION: '20'
  REGISTRY: docker.io

jobs:
  # install-deps:
  #   name: Install Dependencies
  #   runs-on: ubuntu-latest
  #   outputs:
  #     cache-hit: ${{ steps.deps-cache.outputs.cache-hit }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Cache node_modules
  #       id: deps-cache
  #       uses: actions/cache@v3
  #       with:
  #         path: node_modules
  #         key: deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
  #         restore-keys: |
  #           deps-${{ runner.os }}-

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  # lint:
  #   name: Lint Code
  #   needs: install-deps
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run ESLint
  #       run: npm run lint

  # test:
  #   name: Run Tests
  #   needs: install-deps
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run Tests
  #       run: npm test

  # build:
  #   name: Build Project
  #   needs: [install-deps]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Build Project
  #       run: npm run build

  # docker:
  #   name: Docker Build & Push
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and Push Image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         push: true
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         tags: |
  #           ${{ env.DOCKER_IMAGE }}:latest
  #           ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  #     - name: Scan for Vulnerabilities
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: '${{ env.DOCKER_IMAGE }}:latest'
  #         format: 'table'
  #         exit-code: '1'
  #         ignore-unfixed: true
  #         severity: 'CRITICAL,HIGH'

  deploy:
    name: Deploy to Production via Serveo
    # needs: docker
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PROD_SSH_KEY }}" > ~/.ssh/serveo_deploy_key
          chmod 600 ~/.ssh/serveo_deploy_key
          ssh-keyscan -p 42041 serveo.net >> ~/.ssh/known_hosts

      - name: Deploy to Local Machine via Serveo
        run: |
          echo "Deploying to local machine via Serveo..."
          echo "Docker image: $DOCKER_IMAGE:${{ github.sha }}"
          ssh -i ~/.ssh/serveo_deploy_key -o IdentitiesOnly=yes -p 42041 logicrays@serveo.net \
              "docker pull aman4790/cicd-test:8a40068df2e51d64efc7936026aaca536c0d48b5 && docker-compose up -d"
            # "docker pull $DOCKER_IMAGE:${{ github.sha }} && docker-compose up -d"
